<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_viking</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init Variables

image_speed = 0.7;


//To keep mouse position
targetX = 0;
targetY = 0;

//Actual player coins
coins = 0;

//Dragons and monsters kill coount
dragons = 0;
monsters = 0;

//To check if shield is up
shield = false;

//To check if rage is up
rage = false;

//To control time shield and rage time(i dont use alarms)
time_shield = 0;
time_rage = 0;

//To control viking animations stat at end
end_animation = false;
start_animation = false;

//To control the time player is pressing the screen
time_pressed = 0;

//shoot = 0;

//To know if player is pressing the screen
pressed = false;

//Control health, damage and invencible time
health_ = 1;//global.perma_health;
//perma_init = global.perma_health;
damaged = false;
time_damaged = 0;
blink_damaged = false;

//Keep multiplier coins(when kill a monster you get a multiplier)
multiplier = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Logic Player Control


//Check is the player is dead or in pause state
if !obj_control.player_dead and!obj_control.paused {

    //If exist a damage
    if damaged {
        //Collect time on steps
        time_damaged += src_add_second();
        
        //If time damaged more than 1.5 second
        if time_damaged &gt; 1.5 {
            //Damage stop(end invencibility) and reset damage time
            damaged = false;
            time_damaged = 0;
        }
    }

    image_speed = 0.7;

    //If in rage change sprite
    if rage {
        sprite_index = spr_viking_rage;
    } else {
        sprite_index = spr_viking;
    }

    //Always count time pressed, this bullets working if is taping os pressing and this variable
    //control the player movement
    time_pressed += src_add_second();

    //Check if touch is released
    if mouse_check_button_released(mb_left) {

     //play sound axe throwing
        src_exec_sound(snd_axe);

        //create axe(bullet)
        instance_create(x, y, obj_bullet);
        
        //If ins rage create more 2 bullets
        if rage {
            var upBullet = instance_create(x, y, obj_bullet);
            upBullet.direction = 30;
            var downBullet = instance_create(x, y, obj_bullet);
            downBullet.direction = 330;

        }

        targetX = mouse_x;
        targetY = mouse_y;
        direction = point_direction(x, y, targetX, targetY);
        
        //Controll play vertical movment
        if mouse_y &gt; y {
            vspeed = 10;
        } else {
            vspeed = -10;
        }

        //reset time pressed and pressed
        pressed = false;
        time_pressed = 0;
       // shoot = 0;
    }

    //reset time pressed and pressed
    if mouse_check_button_pressed(mb_left) {
        pressed = true;
        time_pressed = 0;
    }

    //If player is pressing(not tapping)
    if pressed {

        //If time pressed more than 0.3 second,  throw a axe
        //the player cant thrwon many bullets at time
        if time_pressed &gt; 0.3 {
        
        
            //Check sound and rage 
            src_exec_sound(snd_axe);
            instance_create(x, y, obj_bullet);
            if rage {
                var upBullet = instance_create(x, y, obj_bullet);
                upBullet.direction = 30;
                var downBullet = instance_create(x, y, obj_bullet);
                downBullet.direction = 330;
            }
            time_pressed = 0;
        }

        //Check mouse and vertical movement of player
        targetX = mouse_x;
        targetY = mouse_y;
        direction = point_direction(x, y, targetX, targetY);
        if mouse_y &gt; y {
            vspeed = 10;
        } else {
            vspeed = -10;
        }

    }

    //if time pressed more 0.3 seconds and not pressing, stop player
    if time_pressed &gt; 0.3 and pressed == false {
        vspeed = 0;
    }

    if y &gt;= targetY - 5 and y &lt;= targetY + 5 {
        vspeed = 0;
    }

    //if shield is up
    if shield {
    
         //control shield time in steps
        time_shield += src_add_second();

        //If shield time more than 5 second
        if time_shield &gt; 5 {
            //Stop and reset shield
            mask_index = spr_viking;
            shield = false;
            time_shield = 0;
        }

    }

    //If rage is up
    if rage {    
    
        //Control time rage ins steps
        time_rage += src_add_second();


        //If rage more than 6 second        
        if time_rage &gt; 6 {
            //Stop rage and reset time
            mask_index = spr_viking;
            rage = false;
            time_rage = 0;
        }

    }

    //Keep the player inside scene
    if y + 70 &lt; 290 and direction &gt; 0 and direction &lt; 180 {
        vspeed = 0;
    } else if y + 70 &gt;= 748 and direction &gt; 180 and direction &lt; 360 {
        vspeed = 0;
    } else if x - 60 &lt; 0 and direction &gt; 100 and direction &lt; 260 {
        vspeed = 0;
    }

    
    //If dragon boss is up
    if obj_control.dragon_up {
    
         //If player is moving change the sprites      
        if vspeed != 0 {//or shoot &lt; 3 {
            if rage {
                sprite_index = spr_viking_rage;
            } else {
                sprite_index = spr_viking;
            }
            image_speed = 0.1;
          //  shoot += 1;
          
          //If player is stoped ste the idle sprites
        } else {
            if rage {
                sprite_index = spr_viking_idle_rage;
            } else {
                sprite_index = spr_viking_idle;
            }
        }
    }

    //Reset horizontal speed
    hspeed = 0;
    
    
/*Control states after player death */

// Start animation death   
} else if !start_animation and!obj_control.paused {

    //reset shield
    shield = false;
    sprite_index = spr_viking_death;
    image_speed = 0.5;
    image_index = 0;
    vspeed = 0;
    //Start death animation
    start_animation = true;

    //If death animation not ended
} else if !end_animation and!obj_control.paused {

    //Check if animation is in last image
    if image_index == (image_number - 1) {
        image_speed = 0;
        //end animation death
        end_animation = true;
    }


    //If paused, stop movement player
} else if obj_control.paused {
    vspeed = 0;
    image_speed = 0;

  /*  if perma_init != global.perma_health {
        perma_init = global.perma_health;
        health_ = 1;
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_collid_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Collisions
//Check collision type
switch other.type {

    //Case collid coin 
    case 0:
    
        //Play sound
        src_exec_sound(snd_coin);
        //start coin particles
        obj_coin_particle.visible = true;
        
        //add coind to play + multiplier
        coins += (1 * multiplier);
        //destroy coin
        with(other) {
            instance_destroy();
        }

        break;

    //Case collid power up
    case 1:
    
         //Play sound
        src_exec_sound(snd_powerup);
        
        //If power shield type
        if other.type_power == 0 {
            shield = true;
            
            //Increase mask collision from player
            mask_index = spr_shield;
            
            //If power is sonic attack
        } else if other.type_power == 1 {
            instance_create(x, y, obj_sonic);
            
            //Else is a rage power
        } else {
            rage = true;
        }
        
        //Destroy power up icon
        with(other) {
            instance_destroy();
        }

        break;

        //Collid if dragon or monsters
    case 2:

        //If not using shield and enemy not dead and player no dead
        if !shield and !other.dead and !obj_control.player_dead {
        
           //If player have health, lost some
            if health_ &gt; 0 {
                health_ = 0;
                //set damaged to invencibility time
                damaged = true;

             //If player dont have health and is not invincible   
            } else if !damaged {
              //Play death sound
                src_exec_sound(snd_player);
                
                //Update states for achievement
                src_update_state();
                obj_control.player_dead = true;
                
                //Show gameover screen
                obj_gameover.visible = true;
                
                //Show Ad banner
                src_show_banner_in(false);
            }

    
            //If player with shield, enemy receive 1000 of damage
        } else if shield {
            other.attacked = 1000;
        }


        break;


    //Collid with a trap
    case 3:
    
    
        //Check shield, dead and with play is over the trap(lava)
        if other.y &gt; (y + 90) and !shield and!obj_control.player_dead {
            if health_ &gt; 0 {

                health_ = 0;
                damaged = true;

            } else if !damaged {
                src_exec_sound(snd_player);
                src_update_state();
                obj_control.player_dead = true;
                obj_gameover.visible = true;
                src_show_banner_in(false);
            }

        }


        break;

        //IF collid dragon breath(fire ball)
    case 4:

        //If fire ball not explode yet  
        if !other.explosion and!shield and!obj_control.player_dead {
            if health_ &gt; 0 {

                health_ = 0;
                damaged = true;

            } else if !damaged {
                src_exec_sound(snd_player);
                src_update_state();
                obj_control.player_dead = true;
                obj_gameover.visible = true;
                src_show_banner_in(false);
            }

        }


        break;



}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control draw player
//If player is stoped, draw shadow
if vspeed == 0 {
    draw_sprite(spr_shadow_viking, 0, x - 10, y + 70);
}

//if invincible
if damaged {

    //Blink sprite
    if blink_damaged {
        draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, 0, c_white, 0.4);
        blink_damaged = false;
    } else {
        draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, 0, c_white, 1);
        blink_damaged = true;
    }

} else {
    draw_self();
}


//Draw shield if is enable
if shield {
    draw_sprite(spr_shield, 0, x, y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>100,100</point>
    <point>100,100</point>
  </PhysicsShapePoints>
</object>
