<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control Gameplay
randomize();

//Time between spawn coins
time_coin = 0;

//Time between spawn power up
time_power_up = 0;
player_dead = false;
paused = false;

//Time spawn mosnter
time_monster = 0;

//Time game is running(second)
time_game  = 0;

//If reached max level
max_level  = false;

//Start level
level = 1

//Show level message
show_level = true;

//Control when show the tutorial(tap message to move and shoot)
show_tap = true;

//Time to show level message
time_level = 0;

//Timne between spawn trap
time_trap = 0;

//If dragon boss is up
dragon_up = false;

//dragon count level
inc_level = 1;

//Keep y position from last icons, coins, trap, etc..
array_posY = 0;
idx = 0;

//is playing
global.playing = true;

//Create font level
font_level = font_add_sprite(spr_font_level, ord('!'),1,0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control gameplay
if !player_dead and !paused {
    
//If show tutorial
    if show_tap {
        instance_create(room_width/2, room_height/2, obj_tutorial);
        show_tap = false;
    }

    //If dragon is not live
    if !dragon_up{
    
        //Keep brackground in paralax(moving)
        background_x[1] -= 10;
        background_x[0] -= 1;
        background_x[2] -= 2;
        
        //Increment times in seconds
        time_game += src_add_second();
        time_coin += src_add_second();
        time_power_up += src_add_second();
        time_monster += src_add_second();
        time_trap += src_add_second();
        
    }
    
    //Show a dragon every 3 levels
    if inc_level == 3 {
        dragon_up = true;
        
        //reset count level
        inc_level = 1;
        
        //shoiw dragon in position
        posY = irandom_range(300, 758);
        posX = room_width + 400;
       instance_create(posX, posY, obj_dragon);
       src_exec_sound(snd_dragon_attack);
    }
   
    //Show level message in next level
     if show_level {
        time_level += src_add_second();
        if time_level &gt; 3 {
            show_level = false;
            time_level = 0;
        }
    }
    
    //spawn a coin every 4 seconds
    if time_coin &gt; 4 {
        qtd = irandom_range(3,5);
        posY = irandom_range(250, 748);
        incr = 50;
        posX = room_width;
        repeat(qtd){
          posX += incr;
          instance_create(posX, posY, obj_coin);
        }
        array_posY[idx] = posY;
        idx+=1;
        time_coin = 0;
    }
    
    //spawn a power up every 10 seconds
    if time_power_up &gt; 10 {
    
        type = irandom_range(0,2);
        posY = irandom_range(240, 758);
    
        posX = room_width + 50;
        inst = instance_create(posX, posY, obj_power_up);
        inst.type_power = type;
    
        array_posY[idx] = posY;
        idx+=1;  
        time_power_up = 0;
    }


    //spawn a monster every 3 seconds
    if time_monster &gt; 3 {    
      
       //Check if is a new level ready( new level every 20 seconds)
       new_level = src_create_monsters(time_game);
      
       //If is new level
       if new_level != level{
       //Show new level message
        show_level = true;
        inc_level += 1;
       }
       level = new_level;
       time_monster = 0;
    }
    
    //Spanwn a trao every 6 seconds
      if time_trap &gt; 6 {   

        type = irandom_range(0,1);

        
        if is_array(array_posY){
            var overLava = true;
            
            //While last icon power up or coin is in same position of trap, keep searching a new position
            while(overLava){
                posY = irandom_range(350, 758);
                overLava = false;
                idx = 0;
                repeat(array_length_1d(array_posY)){
                    //Check if coin or icon power up is over lava(trap)
                    if array_posY[idx] &gt; posY + 25 and array_posY[idx] &lt; posY + 50 {
                        overLava = true;
                        break;
                    }
                
                }
            }
        }
        
    
        //Create trap
        posX = room_width + 50;
        inst = instance_create(posX, posY, obj_trap);
    
        //reset last postion from icon and coins
        array_posY = 0;
        idx=0;
        time_trap = 0;
    }

}

//Check click icons in game
if  mouse_check_button_released(mb_left){

//if click on pause icon
    if scr_over_icon(room_width - 110,5, spr_ui_icon) {
    
        //if player is dead, pause go to menu room
        if player_dead{
            obj_persist.exit_game = true;
            room_goto_previous();
        }else if paused {
            paused = false;
        }else{
            paused = true;
        }
    
    }
    
    //If on pause, and click in menu icon
    else if paused and scr_over_icon(room_width - 110, 120, spr_ui_icon){
          obj_persist.exit_game = true;
          src_update_state();
          room_goto_previous(); 
    }
    
    //If click on Super Might Axe, its is a super power the play can get more watching unity ads videos
    else if !paused and !player_dead and global.might_axe &gt; 0 and scr_over_icon(15, 5, spr_launch_ma){
        //Subtract
        global.might_axe -= 1;
        //Save might axe
        src_post_value('m_axe', '0');
        src_exec_sound(snd_scream);
        //Create might axe
        instance_create(-200, room_height/2, obj_might_axe); 
       
        //If no more axe power, and click, shnow unity ads videos
    }else if global.might_axe == 0 and global.display_unity and scr_over_icon(15, 5, spr_launch_ma){
         paused = true;
       //  UnityAds_Show();     Comentada   
    }

}

if player_dead {
    show_level = false;
}

//If backspaxce button, paused game, or go to menu
if keyboard_check_released(vk_backspace){

    if paused or player_dead{
        obj_persist.exit_game = true;
        src_update_state();
        room_goto_previous(); 
    }else{
        paused = true;
    }
  
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control unity ads video

var type = ds_map_find_value(async_load, "type");

if (type == "video_completed_unity_ads")
{

    var skipped_video = ds_map_find_value(async_load, "skipped");
    
    //If not skipped video, player gain one more axe
    if skipped_video == 0 {
        global.might_axe += 1;
        src_post_value('show_video', 'false');
        src_post_value('m_axe', '1');
    }
    
    

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//Set new font
draw_set_font(font_gameover);

//Draw image for player actual coins
draw_sprite(spr_ui_points, 0,room_width - 125, 5);

//Keep defaulot color
color = draw_get_colour();

draw_set_colour(c_white);

//Draw player coins
scoreText = string(obj_viking.coins);
posText = room_width-155;
posText -= (string_width(scoreText));
draw_text(posText, 20, scoreText);

//If player have multiplier, show next the score
if obj_viking.multiplier &gt; 1 {

    draw_set_colour(c_yellow);
    multText = 'x'+string(obj_viking.multiplier);
    posText = (room_width - 150);
    posText -= (string_width(multText));
    draw_text(posText, 110, multText);
}

draw_set_colour(c_white);
 draw_set_font(font_level);
 
 //if show level, draw level to player
if show_level{
 level_txt = 'Level ' + string(level);
 draw_text(room_width/2 -string_width(level_txt)/2 , room_height/2 - 200, level_txt);
}


draw_set_colour(color);


//Draw icons pause, menu, exit
if player_dead {
 draw_sprite(spr_ui_icon, 3,room_width - 110, 5);
}else if paused{
    draw_sprite(spr_ui_icon, 4,room_width - 110, 5);
    draw_sprite(spr_ui_icon, 3, room_width - 110, 120);
}else{
    draw_sprite(spr_ui_icon, 2,room_width - 110, 5);
}



//If plçayer dont have might axe and videos unity is ready
if global.might_axe == 0  and global.display_unity {
    //draw watrch video for 1 super axe
    draw_sprite(spr_watch_video, 0, -5, -10);
    
    
}else{
    //Draw actual super axe
    draw_sprite(spr_launch_ma, 0,15, 5);
    draw_set_colour(c_white);
    var maText = "x"+string(global.might_axe);
    var posMaText = 270 - string_width(maText);
    draw_text(posMaText, 35, maText);
     draw_set_colour(color);
   
}




//draw viking health
if obj_viking.health_ == 0{
     draw_sprite(spr_health, 1,room_width/2, 5);
}else{
     draw_sprite(spr_health, 2,room_width/2, 5);
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
